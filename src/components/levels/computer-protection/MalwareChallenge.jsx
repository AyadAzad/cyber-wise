import React, { useState } from 'react';

const MalwareChallenge = ({ completeChallenge }) => {
    const [selectedOptions, setSelectedOptions] = useState([]);
    const [showFeedback, setShowFeedback] = useState(false);
    const [currentStep, setCurrentStep] = useState(1);

    const steps = [
        {
            id: 1,
            question: "کام لەم گزینهیانە ڕێگایەکی کاریگەرن بۆ پاراستنی کۆمپیوتەر لە ڤایرۆس؟ (هەمووی دیاری بکە)",
            options: [
                { id: 1, text: "نەناردنی پەڕگەی گەورە لە ئیمەیڵ", correct: false },
                { id: 2, text: "بەکارهێنانی ئەنتی ڤایرۆسێکی بەهێز", correct: true },
                { id: 3, text: "نەکردنی کلیک لەسەر لینکی نەناسراو", correct: true },
                { id: 4, text: "نەهێشتنی پەڕگەکانی پشکنینکراو", correct: true },
                { id: 5, text: "کردنەوەی هەموو پەڕگەکانی پێگەیشتوو", correct: false }
            ]
        },
        {
            id: 2,
            question: "ئەگەر گومانت هەیە کۆمپیوتەرەکەت ڤایرۆسی تێدایە، کام لەم کارانە دەکەیت؟",
            options: [
                { id: 1, text: "پەیوەندی بە پسپۆڕی تەکنیکی دەکەم", correct: true },
                { id: 2, text: "کۆمپیوتەرەکە دەبەستمەوە و دووبارە دەیکەمەوە", correct: true },
                { id: 3, text: "ئینتەرنێت دەبەستمەوە", correct: true },
                { id: 4, text: "هیچ ناکەم و بەردەوام دەبم", correct: false },
                { id: 5, text: "پەڕگە کەسییەکان دەگوازمە کۆمپیوتەرێکی تر", correct: false }
            ]
        }
    ];

    const toggleSelection = (id) => {
        if (selectedOptions.includes(id)) {
            setSelectedOptions(selectedOptions.filter(opt => opt !== id));
        } else {
            setSelectedOptions([...selectedOptions, id]);
        }
    };

    const checkAnswers = () => {
        const currentStepData = steps[currentStep - 1];
        const correctOptions = currentStepData.options.filter(opt => opt.correct).map(opt => opt.id);
        const userCorrect = selectedOptions.every(opt => correctOptions.includes(opt)) &&
            correctOptions.every(opt => selectedOptions.includes(opt));

        setShowFeedback(true);

        if (userCorrect) {
            if (currentStep < steps.length) {
                setTimeout(() => {
                    setCurrentStep(currentStep + 1);
                    setSelectedOptions([]);
                    setShowFeedback(false);
                }, 2000);
            } else {
                setTimeout(() => completeChallenge(40), 2000);
            }
        }
    };

    return (
        <div className="challenge-card">
            <h3>چالاکی ١: پاراستن لە ڤایرۆس</h3>
            <div className="step-indicator">
                پێشگەیشتن {currentStep} لە {steps.length}
            </div>

            <div className="scenario-box">
                <h4>پرسیار:</h4>
                <p>{steps[currentStep - 1].question}</p>
            </div>

            <div className="response-options">
                {steps[currentStep - 1].options.map(option => (
                    <div
                        key={option.id}
                        className={`response-card ${selectedOptions.includes(option.id) ? 'selected' : ''}`}
                        onClick={() => !showFeedback && toggleSelection(option.id)}
                    >
                        <input
                            type="checkbox"
                            checked={selectedOptions.includes(option.id)}
                            readOnly
                        />
                        <label>{option.text}</label>
                    </div>
                ))}
            </div>

            <button
                className="check-button"
                onClick={checkAnswers}
                disabled={selectedOptions.length === 0 || showFeedback}
            >
                پشکنین
            </button>

            {showFeedback && (
                <div className={`feedback ${
                    steps[currentStep - 1].options.filter(opt => opt.correct).map(opt => opt.id).every(opt => selectedOptions.includes(opt)) &&
                    selectedOptions.every(opt => steps[currentStep - 1].options.filter(o => o.correct).map(o => o.id).includes(opt)) ?
                        'correct' : 'incorrect'
                }`}>
                    {steps[currentStep - 1].options.filter(opt => opt.correct).map(opt => opt.id).every(opt => selectedOptions.includes(opt)) &&
                    selectedOptions.every(opt => steps[currentStep - 1].options.filter(o => o.correct).map(o => o.id).includes(opt)) ? (
                        <>
                            <i className="fas fa-check-circle"></i>
                            <p>زۆر باش! تۆ ڕێگە دروستەکانی پاراستنی کۆمپیوتەرت زانی.</p>
                        </>
                    ) : (
                        <>
                            <i className="fas fa-times-circle"></i>
                            <p>هەندێک هەڵەت کردووە. لەبیرت بێت کە پاراستنی کۆمپیوتەر پێویستی بە وریایی و بەکارهێنانی ئامرازە پاڵپشتیکراوەکان هەیە.</p>
                        </>
                    )}
                </div>
            )}
        </div>
    );
};

export default MalwareChallenge;